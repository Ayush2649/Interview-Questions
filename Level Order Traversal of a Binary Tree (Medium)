// Compannies Asked : Flipkart, Morgan Stanley, Accolite, Amazon, Microsoft, Samsung, D-E-Shaw, Ola Cabs, Payu, Adobe, Cisco, Qualcomm

// Java Solution : O(n) & O(n + h) n is total number of node and h is the recursion stack
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void levelOrderRec(TreeNode root, int level, List<List<Integer>> res){
        if(root == null) return;

        if(res.size() <= level){
            res.add(new ArrayList<>());
        }

        res.get(level).add(root.val);

        levelOrderRec(root.left, level + 1, res);
        levelOrderRec(root.right, level + 1, res);
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        levelOrderRec(root, 0, res);
        return res;
    }
}

// C++ Code : 

// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */

class Solution {
public:
    void levelOrderRec(TreeNode* root, int level, vector<vector<int>>& res) {
        if (root == nullptr) return;

        if (res.size() <= level) {
            res.push_back(vector<int>());
        }

        res[level].push_back(root->val);

        levelOrderRec(root->left, level + 1, res);
        levelOrderRec(root->right, level + 1, res);
    }

    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        levelOrderRec(root, 0, res);
        return res;
    }
};
