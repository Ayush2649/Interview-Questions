Companies Asked - Zoho Flipkart Morgan Stanley Accolite Amazon Microsoft FactSet Hike Adobe Google Wipro SAP Labs CarWale

// Java Code : 
class Solution {
    boolean binarySearch(int[] arr, int left, int right, int target){
        while(left <= right){
            int mid = left + (right - left) / 2;
            
            if(arr[mid] == target) {
                return true;
            } else if (arr[mid] < target){
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return false;
    }
    
    boolean twoSum(int arr[], int target) {
        // code here
        // Sorting only needed for Approach 2 & 3
        // Arrays.sort(arr); 
        
        int n = arr.length;
        
        // Approach 1 - Brute Force (Generating all the possible pairs) 
        // T.C. - O(n^2) S.C. - O(1)
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(arr[i] + arr[j] == target) return true;
            }
        }
        
        // Approach 2 - Sorting + binarySearch
        // T.C. - O(n*logn) S.C. - O(1)
        for(int i = 0; i < n; i++){
            int complement = target - arr[i];
            
            if(binarySearch(arr, i + 1, n - 1, complement) == true) return true;
        }
        
        // Approach 3 - Sorting + Two Pointer
        // T.C. - O(n*logn) S.C. - O(1)
        int left = 0, right = n - 1;
        
        while(left < right){
            int sum = arr[left] + arr[right];
            
            if(sum == target){
                return true;
            } else if (sum < target){
                left++;
            } else {
                right--;
            }
        }
        
        // Approach 4 - HashMap
        // T.C. - O(n) S.C. - O(n)
        HashSet<Integer> set = new HashSet<>();
        
        for(int i = 0; i < n; i++){
            int complement = target - arr[i];
            
            if(set.contains(complement)) return true;
            
            set.add(arr[i]);
        }
        
        return false;
    }
}

// C++ Code : 
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    bool binarySearch(vector<int>& arr, int left, int right, int target) {
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) return true;
            else if (arr[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return false;
    }

    bool twoSum(vector<int>& arr, int target) {
        int n = arr.size();

        // Approach 1: Brute Force (O(n^2))
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] + arr[j] == target) return true;
            }
        }

        // Approach 2: Binary Search (O(n*logn))
        vector<int> sortedArr = arr;
        sort(sortedArr.begin(), sortedArr.end());

        for (int i = 0; i < n; i++) {
            int complement = target - sortedArr[i];
            if (binarySearch(sortedArr, i + 1, n - 1, complement)) return true;
        }

        // Approach 3: Two Pointers (O(n*logn))
        int left = 0, right = n - 1;
        while (left < right) {
            int sum = sortedArr[left] + sortedArr[right];
            if (sum == target) return true;
            else if (sum < target) left++;
            else right--;
        }

        // Approach 4: HashSet (O(n))
        unordered_set<int> seen;
        for (int i = 0; i < n; i++) {
            int complement = target - arr[i];
            if (seen.find(complement) != seen.end()) return true;
            seen.insert(arr[i]);
        }

        return false;
    }
};
