Company Tags : Morgan Stanley, Amazon, Microsoft, Snapdeal, D-E-Shaw, Goldman Sachs

// Java Code :
class Solution {
    public ArrayList<ArrayList<String>> anagrams(String[] arr) {
        // code here
        
        // Approach 1 - O(n * klogk)
        HashMap<String, ArrayList<String>> map = new HashMap<>();
        
        for(String str : arr){
            char[] chars = str.toCharArray();
            Arrays.sort(chars);
            String sorted = new String(chars);
            
            if(!map.containsKey(sorted)){
                map.put(sorted, new ArrayList<>());
            }
        
            map.get(sorted).add(str);
        }
        
        return new ArrayList<>(map.values());
        
        // Approach 2 - O(n * k)
        HashMap<String, ArrayList<String>> map = new HashMap<>();
        
        for(String str : arr){
            int[] count = new int[26];
            for(char ch : str.toCharArray()){
                count[ch - 'a']++;
            }
            
            StringBuilder keyBuilder = new StringBuilder();
            for(int c : count){
                keyBuilder.append(c).append('#');
            }
            
            String key = keyBuilder.toString();
            
            map.computeIfAbsent(key, k -> new ArrayList<>()).add(str);
        }
        
        return new ArrayList<>(map.values());
    }
}

// C++ Code : 
class Solution {
public:
    vector<vector<string>> anagrams(vector<string>& arr) {
        // -------- Approach 1: Using sorted string as key (O(n * k log k)) --------
        unordered_map<string, vector<string>> map1;
        
        for (string& str : arr) {
            string sorted = str;
            sort(sorted.begin(), sorted.end());
            map1[sorted].push_back(str);
        }
        
        vector<vector<string>> result1;
        for (auto& pair : map1) {
            result1.push_back(pair.second);
        }

        // -------- Approach 2: Using character count as key (O(n * k)) --------
        unordered_map<string, vector<string>> map2;

        for (string& str : arr) {
            vector<int> count(26, 0);
            for (char ch : str) {
                count[ch - 'a']++;
            }

            string key;
            for (int c : count) {
                key += to_string(c) + '#';
            }

            map2[key].push_back(str);
        }

        vector<vector<string>> result2;
        for (auto& pair : map2) {
            result2.push_back(pair.second);
        }

        // Return either result1 or result2 depending on the approach you want
        return result2; // Using character count approach
        // return result1; // If you want to use the sorting approach
    }
};
