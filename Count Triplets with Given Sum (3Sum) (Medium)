Company Tags: Accenture, Samsung, Info Edge, Intuit, Myntra, Meta (Facebook), Amazon, Microsoft, Google, Walmart, Ola, Mapbox

/ Java Code : 
class Solution {
    public int countTriplets(int[] arr, int target) {
        // Code Here
        int n = arr.length;
        int count = 0;
        
        // Approach 1 - O(n^3)
        for(int i = 0; i < n - 2; i++){
            for(int j = i + 1; j < n - 1; j++){
                for(int k = j + 1; k < n; k++){
                    if(arr[i] + arr[j] + arr[k] == target){
                        count++;
                    }
                }
            }
        }
        
        // Approach 2 - O(n^2)
        for(int i = 0; i < n - 2; i++){
            int left = i + 1;
            int right = n - 1;
            
            while(left < right){
                int sum = arr[i] + arr[left] + arr[right];
                
                if(sum < target){
                    left++;
                } else if(sum > target){
                    right--;
                } else {
                    int ele1 = arr[left], ele2 = arr[right];
                    int cnt1 = 0, cnt2 = 0;
                    
                    while(left <= right && arr[left] == ele1){
                        left++;
                        cnt1++;
                    }
                    
                    while(left <= right && arr[right] == ele2){
                        right--;
                        cnt2++;
                    }
                    
                    if(ele1 == ele2){
                        count += (cnt1 * (cnt1 - 1)) / 2;
                    } else {
                        count += (cnt1 * cnt2);
                    }
                }
            }
        }
        
        return count;
    }
}

// C++ Code : 
class Solution {
public:
    int countTriplets(vector<int>& arr, int target) {
        int n = arr.size();
        int count = 0;

        // Approach 1 - O(n^3)
        for (int i = 0; i < n - 2; ++i) {
            for (int j = i + 1; j < n - 1; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (arr[i] + arr[j] + arr[k] == target) {
                        count++;
                    }
                }
            }
        }

        // Approach 2 - O(n^2)
        sort(arr.begin(), arr.end()); // Ensure array is sorted

        for (int i = 0; i < n - 2; ++i) {
            int left = i + 1;
            int right = n - 1;

            while (left < right) {
                int sum = arr[i] + arr[left] + arr[right];

                if (sum < target) {
                    left++;
                } else if (sum > target) {
                    right--;
                } else {
                    int ele1 = arr[left], ele2 = arr[right];
                    int cnt1 = 0, cnt2 = 0;

                    while (left <= right && arr[left] == ele1) {
                        left++;
                        cnt1++;
                    }

                    while (left <= right && arr[right] == ele2) {
                        right--;
                        cnt2++;
                    }

                    if (ele1 == ele2) {
                        count += (cnt1 * (cnt1 - 1)) / 2;
                    } else {
                        count += (cnt1 * cnt2);
                    }
                }
            }
        }

        return count;
    }
};
